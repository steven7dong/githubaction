name: Cleanup

on:
  workflow_call:
    inputs:
      cluster-name:
        required: true
        description: AKS Cluster Name With Randomly Generated Suffix
        type: string
  workflow_dispatch:
    inputs:
      cluster-name:
        required: true
        description: AKS Cluster Name With Randomly Generated Suffix
        type: string


jobs:
  setup-workload-identity:
    name: Cleanup
    runs-on: ubuntu-latest
    steps:

      - name: Log into Azure
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_SERVICE_PRINCIPAL_APP_ID }} \
            --password ${{ secrets.AZURE_SERVICE_PRINCIPAL_PASSWORD }} \
            --tenant ${{ secrets.AZURE_SERVICE_PRINCIPAL_TENANT }}
            
      # - name: Install Dependencies 
      #   id: install-dependencies 
      #   run: |

      #       curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      #       chmod +x kubectl
      #       sudo mv kubectl /usr/local/bin
      #       kubectl version 2>&1 || true

      - name: Cleanup
        id: cleanup
        env: 
          RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
          CLUSTER_NAME: ${{ inputs.cluster-name }}
        run: | 
          # az aks get-credentials --name $CLUSTER_NAME --resource-group $RESOURCE_GROUP  --overwrite-existing
          # kubectl delete pod -n kafka kafka-producer 2>&1 || true 
          # kubectl delete pod -n kafka kafka-golang-consumer 2>&1 || true 
          # kubectl delete svc -n kafka consumer 2>&1 || true 
          # sleep 30
          # kubectl -n kafka delete $(kubectl get strimzi -o name -n kafka) 2>&1 || true 
          # kubectl -n kafka delete -f 'https://strimzi.io/install/latest?namespace=kafka' 2>&1 || true 
          # sleep 30 
          # kubectl delete namespace kafka  2>&1 || true
          az aks stop --resource-group ${{ vars.RESOURCE_GROUP }} --name $CLUSTER_NAME 2>&1
          sleep 30 
          
          max_retries=5
          retries=0
          while [ $retries -lt $max_retries ]; do
              echo "Querying for the decrypted message from $ConsumerIP"
              result=$(az aks show -g conf-container-examples -n $CLUSTER_NAME --query 'provisioningState' -otsv) 

              if [[ $result == *"Succeeded"* ]]; then
                  echo "Returned result is $result"
                  echo "Cluster is ready to be deleted."
                  az aks delete --resource-group ${{ vars.RESOURCE_GROUP }} --name $CLUSTER_NAME --no-wait --yes
                  break  # Exit the loop on successful attempt
              else
                  echo "Returned cluster provisioning state is $result"
                  echo "Retrying in 3 minutes..."
                  retries=$((retries+1))
              fi
              sleep 180
          done