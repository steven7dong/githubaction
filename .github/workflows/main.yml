name: Kafka Demo Test 

on:
  workflow_call:
    inputs:
      skr-client-maa-endpoint:
        description: "Attestation endpoint"
        required: true
        default: "sharedeus2.eus2.test.attest.azure.net"
        type: string
      sidecar_registry:
        description: "The registry to get the image from"
        required: true
        default: "http://mcr.microsoft.com"
        type: string
      key-release-image:
        description: "The image of the SKR sidecar to use"
        required: true
        default: "aci/skr:2.7"
        type: string
      kubernetes-version:
        description: "Kubernetes version to use for AKS cluster creation"
        required: true
        default: "1.28.3"
        type: string
      skr-client-akv-endpoint:
        description: "AKV endpoint for key release"
        required: true
        default: "just-test"
        type: string
      skr-kafka-demo-topic:
        description: "Kafka topic"
        required: true
        default: "kafka-demo-topic"
        type: string  
      skr-client-kid:
        description: "Key release key id"
        required: true
        default: "kafka-encryption-demo"
        type: string  
  workflow_dispatch:
    inputs:
      skr-client-maa-endpoint:
        description: "Attestation endpoint"
        required: true
        default: "sharedeus2.eus2.test.attest.azure.net"
        type: string
      sidecar_registry:
        description: "The registry to get the image from"
        required: true
        type: choice
        options: 
          - http://mcr.microsoft.com
          - http://confidentialsidecars.azurecr.io
      key-release-image:
        description: "The image of the SKR sidecar to use"
        required: true
        default: "aci/skr:2.7"
        type: string
      kubernetes-version:
        description: "Kubernetes version to use for AKS cluster creation"
        required: true
        default: "1.28.3"
        type: string
      skr-client-akv-endpoint:
        description: "AKV endpoint for key release"
        required: true
        default: "just-test" 
        type: string
      skr-kafka-demo-topic:
        description: "Kafka topic"
        required: true
        default: "kafka-demo-topic"
        type: string  
      skr-client-kid:
        description: "Key release key id"
        required: true
        default: "kafka-encryption-demo"
        type: string  
  push:
    branches:
      - main
    paths:
      - .github/workflows/**
      - infra/**
      - examples/key_release/**
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/**
      - infra/**
      - examples/key_release/**
  merge_group:
    branches:
      - main
  schedule:
    - cron: "0 7 * * *"

jobs:
  prepare:
    name: Prepare Test
    runs-on: ubuntu-latest
    outputs:
      id: ${{ steps.generate-id.outputs.id }}
    steps:
      - name: Get Workflow ID
        id: generate-id
        run: echo "id=$(openssl rand -hex 8 | tr -d '\n')" >> $GITHUB_OUTPUT

  create-aks-cluster: 
    name: Create AKS Cluster
    uses: ./.github/workflows/_create_aks_cluster.yml
    needs: [prepare]
    secrets: inherit
    with: 
      kubernetes-version: ${{ inputs.kubernetes-version }}

  # setup-test-env:
  #   name: Setup Workload Identity and Kafka Cluster
  #   uses: ./.github/workflows/_setup_workload_identity.yml
  #   needs: [prepare, create-aks-cluster]
  #   secrets: inherit
  #   with:
  #     kubernetes-version: ${{ inputs.kubernetes-version }}

  # deploy-kafka-test: 
  #   name: Deploy Kafka Demo Test 
  #   uses: ./.github/workflows/_deploy_kafka_test.yml
  #   needs: [prepare, create-aks-cluster, setup-test-env]
  #   secrets: inherit 
  #   with: 
  #     skr-client-akv-endpoint: ${{ inputs.skr-client-akv-endpoint }}
  #     skr-client-maa-endpoint: ${{ inputs.skr-client-maa-endpoint }}
  #     skr-client-kid: ${{ inputs.skr-client-kid }}
  #     skr-kafka-demo-topic: ${{ inputs.skr-kafka-demo-topic }}

  # cleanup: 
  #   name: Clean Up
  #   uses: ./.github/workflows/_cleanup.yml
  #   needs: [prepare]
  #   secrets: inherit 
  #   with: 
  #     cluster-name: hello


  

