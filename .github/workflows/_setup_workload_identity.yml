name: Setup Workload Identity 

on:
  workflow_call:
    inputs:
      kubernetes-version: 
        required: true
        type: string
        description: Azure AKS Kubernetes Version
      cluster-name:
        required: true
        type: string
        default: sameplclusternmae
        description: Azure AKS Kubernetes Cluster Name 
  workflow_dispatch:
    inputs:
      kubernetes-version:
        required: true
        type: string
        description: Azure AKS Kubernetes Version
      cluster-name:
        required: true
        type: string
        description: Azure AKS Kubernetes Cluster Name 


jobs:
  setup-workload-identity:
    name: Setup Workload Identity 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log into Azure
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_SERVICE_PRINCIPAL_APP_ID }} \
            --password ${{ secrets.AZURE_SERVICE_PRINCIPAL_PASSWORD }} \
            --tenant ${{ secrets.AZURE_SERVICE_PRINCIPAL_TENANT }}

      - name: Install Dependencies 
        id: install-dependencies 
        run: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin

      - name: Create AKS Cluster
        env:
          SERVICE_ACCOUNT_NAMESPACE: ${{ vars.SERVICE_ACCOUNT_NAMESPACE }}
          SERVICE_ACCOUNT_NAME: ${{ vars.SERVICE_ACCOUNT_NAME }}
          RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }} 
          CLUSTER_NAME: ${{ inputs.cluster-name }}
          USER_ASSIGNED_IDENTITY_NAME: ${{ vars.USER_ASSIGNED_IDENTITY_NAME }}
          FEDERATED_IDENTITY_CREDENTIAL_NAME: ${{ vars.FEDERATED_IDENTITY_CREDENTIAL_NAME }}
        run: | 
          echo CLUSTER_NAME $CLUSTER_NAME
          echo SERVICE_ACCOUNT_NAMESPACE $SERVICE_ACCOUNT_NAMESPACE
          echo SERVICE_ACCOUNT_NAME $SERVICE_ACCOUNT_NAME
          echo RESOURCE_GROUP $RESOURCE_GROUP
          echo USER_ASSIGNED_IDENTITY_NAME $USER_ASSIGNED_IDENTITY_NAME
          echo FEDERATED_IDENTITY_CREDENTIAL_NAME $FEDERATED_IDENTITY_CREDENTIAL_NAME
        #   az aks get-credentials --name ${{ inputs.cluster-name }} --resource-group ${{ vars.RESOURCE_GROUP }}  --overwrite-existing
        #   export AKS_OIDC_ISSUER="$(az aks show -n ${{ inputs.cluster-name }} -g ${{ vars.RESOURCE_GROUP }} --query "oidcIssuerProfile.issuerUrl" -otsv)"
        #   echo "Setting AKS_OIDC_ISSUER to $AKS_OIDC_ISSUER"

        #   export SUBSCRIPTION="$(az account show --query id --output tsv)" 
        #   result=$(az identity show --name ${{ vars.USER_ASSIGNED_IDENTITY_NAME }} --resource-group ${{ vars.RESOURCE_GROUP }} --subscription "${SUBSCRIPTION}" 2>&1 || true)
        #   if [[ $result == *"not found"* ]]; then
        #       echo "Identity ${{ vars.USER_ASSIGNED_IDENTITY_NAME }} not found. Creating... "
        #       az identity create --name ${{ vars.USER_ASSIGNED_IDENTITY_NAME }} --resource-group ${{ vars.RESOURCE_GROUP }} --location eastus --subscription "${SUBSCRIPTION}" 
        #   else
        #       echo Identity ${{ vars.USER_ASSIGNED_IDENTITY_NAME }} already exists. 
        #   fi

        #   export USER_ASSIGNED_CLIENT_ID="$(az identity show --resource-group ${{ vars.RESOURCE_GROUP }} --name ${{ vars.USER_ASSIGNED_IDENTITY_NAME }} --query 'clientId' -otsv)"
        #   echo "Setting USER_ASSIGNED_CLIENT_ID to $USER_ASSIGNED_CLIENT_ID"

        #   export MANAGED_IDENTITY="$(az identity show --resource-group ${{ vars.RESOURCE_GROUP }} --name ${{ vars.USER_ASSIGNED_IDENTITY_NAME }} --query 'id' -otsv)"
        #   echo "Setting MANAGED_IDENTITY to $MANAGED_IDENTITY"

        #   result=$(kubectl get namespace kafka 2>&1 || true)
        #   if [[ $result == *"not found"* ]]; then
        #       echo "kafka namespace not found. Create kafka namespace..."
        #       kubectl create namespace kafka
        #   else
        #       echo "kafka namespace already exists."
        #   fi

        #   kubectl delete sa -n ${SERVICE_ACCOUNT_NAMESPACE} ${SERVICE_ACCOUNT_NAME} 2>&1 || true
        #   cat <<EOF | kubectl apply -f - 
        #   apiVersion: v1 
        #   kind: ServiceAccount 
        #   metadata: 
        #     annotations: 
        #       azure.workload.identity/client-id: ${USER_ASSIGNED_CLIENT_ID} 
        #     name: ${SERVICE_ACCOUNT_NAME} 
        #     namespace: ${SERVICE_ACCOUNT_NAMESPACE} 
        #   EOF

        #   result=$(az identity federated-credential show --name ${{ vars.FEDERATED_IDENTITY_CREDENTIAL_NAME }} --identity-name ${{ vars.USER_ASSIGNED_IDENTITY_NAME }} --resource-group ${{ vars.RESOURCE_GROUP }} 2>&1 || true)
        #   if [[ $result == *$AKS_OIDC_ISSUER* ]]; then
        #       echo "Federated identity already exists"
        #   else
        #       echo "Federated identity not found. Creating... "
        #       az identity federated-credential create --name ${{ vars.FEDERATED_IDENTITY_CREDENTIAL_NAME }} --identity-name ${{ vars.USER_ASSIGNED_IDENTITY_NAME }} --resource-group ${{ vars.RESOURCE_GROUP }} --issuer ${AKS_OIDC_ISSUER} --subject system:serviceaccount:${SERVICE_ACCOUNT_NAMESPACE}:${SERVICE_ACCOUNT_NAME} 
        #   fi

          