name: CI

on:
  workflow_call:
    inputs:
      skr-client-maa-endpoint:
        description: "Attestation endpoint"
        required: true
        default: "uisd"
        type: string
      sidecar_registry:
        description: "The registry to get the image from"
        required: true
        default: "http://mcr.microsoft.com"
        type: string
      key-release-image:
        description: "The image of the SKR sidecar to use"
        required: false
        default: "aci/skr:2.7"
        type: string
      kubernetes-version:
        description: "Kubernetes version to use for AKS cluster creation"
        required: true
        default: "1.24.0"
        type: string
      skr-client-akv-endpoint:
        description: "AKV endpoint for key release"
        required: true
        default: ""
        type: string
      skr-kafka-demo-topic:
        description: "Kafka topic"
        required: true
        default: "demo-topic"
        type: string  
      skr-client-kid:
        description: "Key release key id"
        required: true
        default: ""
        type: string  

  workflow_dispatch:
    inputs:
      skr-client-maa-endpoint:
        description: "Attestation endpoint"
        required: true
        type: choice
        options: 
          - http://mcr.microsoft.com
          - http://confidentialsidecars.azurecr.io
      sidecar_registry:
        description: "The registry to get the image from"
        required: true
        type: choice
        options: 
          - http://mcr.microsoft.com
          - http://confidentialsidecars.azurecr.io
      key-release-image:
        description: "The image of the SKR sidecar to use"
        required: false
        default: "aci/skr:2.7"
        type: string
      kubernetes-version:
        description: "Kubernetes version to use for AKS cluster creation"
        required: true
        default: "1.24.0"
        type: string
      skr-client-akv-endpoint:
        description: "AKV endpoint for key release"
        required: true
        default: ""
        type: string
      skr-kafka-demo-topic:
        description: "Kafka topic"
        required: true
        default: "demo-topic"
        type: string  
      skr-client-kid:
        description: "Key release key id"
        required: true
        default: ""
        type: string  
  push:
    branches:
      - main
    paths:
      - .github/workflows/**
      - infra/**
      - examples/key_release/**
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/**
      - infra/**
      - examples/key_release/**
  merge_group:
    branches:
      - main
  schedule:
    - cron: "0 7 * * *"

jobs:
  resolve-image:
    name: Resolve Sidecar Image
    runs-on: ubuntu-latest
    outputs:
      KEY_RELEASE_IMAGE: ${{ steps.resolve-image.outputs.KEY_RELEASE_IMAGE }}
      SIDECAR_REGISTRY: ${{ steps.resolve-image.outputs.SIDECAR_REGISTRY }}
      KAFKA_TOPIC: ${{ steps.resolve-image.outputs.KAFKA_TOPIC }}
      KUBERNETES_VERSION: ${{ steps.resolve-image.outputs.KUBERNETES_VERSION }}
      SKR_CLIENT_AKV_ENDPOINT: ${{ steps.resolve-image.outputs.SKR_CLIENT_AKV_ENDPOINT }}
      SKR_CLIENT_MAA_ENDPOINT: ${{ steps.resolve-image.outputs.SKR_CLIENT_MAA_ENDPOINT }}
      SKR_CLIENT_KID: ${{ steps.resolve-image.outputs.SKR_CLIENT_KID }}
    steps:
      - name: Define Image to Use
        id: resolve-image
        env:
          SIDECAR_REGISTRY: ${{ inputs.sidecar_registry }}
          KEY_RELEASE_IMAGE: ${{ inputs.key-release-image }}
          KAFKA_TOPIC: ${{inputs.skr-kafka-demo-topic}}
          KUBERNETES_VERSION : ${{inputs.kubernetes-version}}
          SKR_CLIENT_AKV_ENDPOINT: ${{inputs.skr-client-akv-endpoint}}
          SKR_CLIENT_MAA_ENDPOINT: ${{inputs.skr-client-maa-endpoint}}
          SKR_CLIENT_KID: ${{inputs.skr-client-kid}}
        run: |
          if [ -z "$SIDECAR_REGISTRY" ]; then
            SIDECAR_REGISTRY="http://mcr.microsoft.com"
          fi
          if [ -z "$KEY_RELEASE_IMAGE" ]; then
            KEY_RELEASE_IMAGE="aci/skr:2.7"
          fi

          echo "SIDECAR_REGISTRY=$SIDECAR_REGISTRY" >> $GITHUB_OUTPUT
          echo "KEY_RELEASE_IMAGE=$KEY_RELEASE_IMAGE" >> $GITHUB_OUTPUT
          echo "KAFKA_TOPIC=$KAFKA_TOPIC" >> $GITHUB_OUTPUT
          echo "SKR_CLIENT_AKV_ENDPOINT=$SKR_CLIENT_AKV_ENDPOINT" >> $GITHUB_OUTPUT
          echo "SKR_CLIENT_MAA_ENDPOINT=$SKR_CLIENT_MAA_ENDPOINT" >> $GITHUB_OUTPUT
          echo "SKR_CLIENT_KID=$SKR_CLIENT_KID" >> $GITHUB_OUTPUT
          echo "KUBERNETES_VERSION=$KUBERNETES_VERSION" >> $GITHUB_OUTPUT

  prepare:
    name: Prepare Test
    runs-on: ubuntu-latest
    outputs:
      id: ${{ steps.generate-id.outputs.id }}

    steps:
        
      - name: Get Workflow ID
        id: generate-id
        run: echo "id=$(openssl rand -hex 8 | tr -d '\n')" >> $GITHUB_OUTPUT


  # create-aks-cluster: 
  #   name: Create AKS Cluster
  #   uses: ./.github/workflows/_create_aks_cluster.yml
  #   needs: [resolve-image, prepare]
  #   secrets: inherit
  #   with: 
  #     kubernetes-version: ${{ needs.resolve-image.outputs.KUBERNETES_VERSION }}

  # setup-test-env: 
  #   name: Setup Workload Identity and Kafka Cluster 
  #   uses: ./.github/workflows/_setup_workload_identity.yml
  #   needs: [resolve-image, prepare] #add create aks cluster 
  #   secrets: inherit 
  #   with: 
  #     kubernetes-version: ${{ needs.resolve-image.outputs.KUBERNETES_VERSION }}
  #     cluster-name: "skr-kafka-demo-test"

  deploy-kafka-test: 
    name: Deploy Kafka Demo Test 
    uses: ./.github/workflows/_deploy_kafka_test.yml
    needs: [resolve-image, prepare] #add create aks cluster 
    secrets: inherit 
    with: 
      kubernetes-version: ${{ needs.resolve-image.outputs.KUBERNETES_VERSION }}
      cluster-name: "skr-kafka-demo-test"
  
  # cleanup: 
  #   name: Deploy Kafka Demo Test 
  #   uses: ./.github/workflows/_cleanup.yml
  #   secrets: inherit 
  #   with: 
  #     kubernetes-version: ${{ needs.resolve-image.outputs.KUBERNETES_VERSION }}
  #     cluster-name: "skr-kafka-demo-test"
  # attestation:
  #   name: Attestation
  #   uses: ./.github/workflows/test_example1.yml
  #   needs: [resolve-image, prepare]
  #   secrets: inherit
  #   with:
  #     workload-id: ${{ needs.prepare.outputs.id }}
  #     key-release-image: ${{ needs.resolve-image.outputs.KEY_RELEASE_IMAGE }}
  #     sidecar-registry: ${{ needs.resolve-image.outputs.SIDECAR_REGISTRY }}
  #     kafka-topic: ${{ needs.resolve-image.outputs.KAFKA_TOPIC }}
  #     kubernetes-version: ${{ needs.resolve-image.outputs.KUBERNETES_VERSION }}
  #     skr-client-akv-endpoint: ${{ needs.resolve-image.outputs.SKR_CLIENT_AKV_ENDPOINT }}
  #     skr-client-maa-endpoint: ${{ needs.resolve-image.outputs.SKR_CLIENT_MAA_ENDPOINT }}
  #     skr-client-kid: ${{ needs.resolve-image.outputs.SKR_CLIENT_KID }}


  

